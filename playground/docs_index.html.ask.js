const base = `playground/docs_index`

const theme = await read(`extract_css_theme.css`) || await read(`${base}.theme`) || await ask(`
  Generate a simple 4-colours theme for web page rendered from Markdown.  
`)
await write(theme, `${base}.theme`)

/**
 * For now, this md file is written by me.
 * But then I can make it from a routine.
 * This allows to start fast and scale as you go.
 */
const source = await read(`${base}.source.md`)
await write(source, `${base}.source`)

/**
 * You write so many prompts, so you train yourself a lot, which is good for your prompting skills.
 */
const handlebars_template = await ask(`
    Create Handlebars template for documentation page.
    It should support common Markdown visual elements.
`)
await write(handlebars_template, `${base}.handlebars_template`)

const html_template = await ask(`
  Render provided Handlebars template to HTML.
  Apply provided theme.
  Reply with valid html page.

  [theme]
  ${theme}
  [/theme]

  [handlebars_template]
  ${handlebars_template}
  [/handlebars_template]
`)
await write(html_template, `${base}.html_template`)

const html = await ask(`
  In the provided html replace meaningful content with the provided content.
  Keep html markup unchanged.
  Reply with valid html page.

  [content]
  ${source}
  [/content]

  [html_template]
  ${html_template}
  [/html_template]
`).then(payload => ask(`
  Add top fixed html block to the provided html.
  Make it pretty.

  [banner_content]
  This HTML page is completely generated by AI as a result of running an Ask routine.
  [/banner_content]

  [original_html]
  ${payload}
  [/original_html]
`))
await write(html, `${base}.html`)
await write(html, `public/index_new.html`)

// so this way we progress from temporary artifacts to the desired by intent, which may be specified in the routine file path.
return `${base}.html`